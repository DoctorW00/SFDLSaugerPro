name: C++ Qt5 Build
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  macos:
    runs-on: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Install Qt5
        run: |
          brew update
          brew install qt@5
          brew link qt@5 --force
      - name: Debug Qt5 Installation
        run: |
          echo "Checking Qt5 installation..."
          ls -l /usr/local/opt/qt@5/bin || true
          ls -l /opt/homebrew/opt/qt@5/bin || true
          which qmake
          qmake --version || true
      - name: Set up Xcode command-line tools
        run: |
          sudo xcode-select --switch /Applications/Xcode.app
          xcode-select --install || true
      - name: Build ftplib
        run: |
          git clone https://github.com/DoctorW00/qtftp.git
          cd qtftp
          /opt/homebrew/opt/qt@5/bin/qmake || /usr/local/opt/qt@5/bin/qmake
          make
          sudo make install
      - name: Build unrar library
        run: |
          cd unrar
          make clean
          make lib CXXFLAGS="-arch arm64"
          mv libunrar.so libunrar.dylib
          ls -la
      - name: Build C++ with Qt5
        run: |
          mkdir build
          cd build
          /opt/homebrew/opt/qt@5/bin/qmake ../ || /usr/local/opt/qt@5/bin/qmake ../
          make
      - name: Create Info.plist
        run: |
          mkdir -p build/SFDLSaugerPro.app/Contents
          cat > build/SFDLSaugerPro.app/Contents/Info.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>NSDocumentsFolderUsageDescription</key>
              <string>Bitte wähle einen Ordner, in dem Daten gespeichert werden sollen.</string>
              <key>NSDownloadsFolderUsageDescription</key>
              <string>Bitte wähle einen Ordner, in dem Daten gespeichert werden sollen.</string>
          </dict>
          </plist>
          EOF
      - name: Copy unrar lib to SFDLSaugerPro.app
        run: |
          mkdir -p build/SFDLSaugerPro.app/Contents/Frameworks/
          cp unrar/libunrar.dylib build/SFDLSaugerPro.app/Contents/Frameworks/libunrar.dylib
      - name: Fix library paths
        run: |
          install_name_tool -change libunrar.so @executable_path/../Frameworks/libunrar.dylib build/SFDLSaugerPro.app/Contents/MacOS/SFDLSaugerPro
      - name: Generate Self-Signed Code Signing Certificate
        env:
          KEY_PASS: ${{ secrets.KEY_PASSWORD }}
          P12_PASS: ${{ secrets.P12_PASSWORD }}
        run: |
          openssl genrsa -out codesign.key 2048
          openssl req -new -key codesign.key -out codesign.csr -subj "/CN=SFDLSaugerPro/O=GrafSauger/C=DE"
          cat > codesign.ext << EOF
          basicConstraints = CA:FALSE
          keyUsage = digitalSignature
          extendedKeyUsage = codeSigning
          EOF
          openssl x509 -req -days 1825 -in codesign.csr -signkey codesign.key -out codesign.crt -extfile codesign.ext
          openssl pkcs12 -export -out codesign.p12 -inkey codesign.key -in codesign.crt -passin "pass:$KEY_PASS" -passout "pass:$P12_PASS"
      - name: Debug Secrets Presence
        run: |
          if [ -z "${{ secrets.KEYCHAIN_PASSWORD }}" ]; then echo "KEYCHAIN_PASSWORD is not set"; exit 1; fi
          if [ -z "${{ secrets.P12_PASSWORD }}" ]; then echo "P12_PASSWORD is not set"; exit 1; fi
          echo "Secrets are set"
      - name: Install coreutils for gtimeout
        run: |
          brew install coreutils
          echo "Adding coreutils to PATH..."
          echo "/opt/homebrew/opt/coreutils/libexec/gnubin" >> $GITHUB_PATH
      - name: Verify gtimeout Installation
        run: |
          echo "Checking gtimeout..."
          gtimeout --version || { echo "gtimeout not found"; exit 1; }
          echo "gtimeout is installed"
      - name: Debug Secrets Presence
        run: |
          if [ -z "${{ secrets.KEYCHAIN_PASSWORD }}" ]; then echo "KEYCHAIN_PASSWORD is not set"; exit 1; fi
          if [ -z "${{ secrets.P12_PASSWORD }}" ]; then echo "P12_PASSWORD is not set"; exit 1; fi
          echo "Secrets are set"
      - name: Setup Keychain
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo "Unlocking login keychain..."
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" ~/Library/Keychains/login.keychain-db || { echo "Failed to unlock login keychain"; exit 1; }
          echo "Setting keychain settings..."
          security set-keychain-settings -t 3600 -u ~/Library/Keychains/login.keychain-db || { echo "Failed to set keychain settings"; exit 1; }
          echo "Listing keychains..."
          security list-keychains
          echo "Checking keychain status..."
          security show-keychain-info ~/Library/Keychains/login.keychain-db || { echo "Login keychain not found or locked"; exit 1; }
          echo "Login keychain is ready"
      - name: Verify Certificate and P12
        env:
          P12_PASS: ${{ secrets.P12_PASSWORD }}
        run: |
          echo "Checking codesign.p12..."
          openssl pkcs12 -info -in codesign.p12 -passin "pass:$P12_PASS" -nokeys || { echo "Invalid P12 file or password"; exit 1; }
          echo "Checking codesign.crt..."
          openssl x509 -in codesign.crt -text -noout || { echo "Invalid certificate"; exit 1; }
      - name: Import Certificate into Keychain
        env:
          P12_PASS: ${{ secrets.P12_PASSWORD }}
        run: |
          echo "Starting certificate import..."
          /usr/local/bin/gtimeout 30 security import codesign.p12 -P "$P12_PASS" -k ~/Library/Keychains/login.keychain-db -T /usr/bin/codesign || { echo "Failed to import codesign.p12"; exit 1; }
          echo "Certificate imported successfully"
          echo "Adding trusted cert..."
          security add-trusted-cert -d -r trustRoot -k ~/Library/Keychains/login.keychain-db codesign.crt || { echo "Failed to add trusted cert"; exit 1; }
          echo "Trusted cert added successfully"
          echo "Listing code signing identities..."
          security find-identity -v -p codesigning ~/Library/Keychains/login.keychain-db || { echo "Failed to list identities"; exit 1; }
      - name: Use macdeployqt to deploy the app
        run: |
          /opt/homebrew/opt/qt@5/bin/macdeployqt build/SFDLSaugerPro.app -libpath=build/SFDLSaugerPro.app/Contents/Frameworks/ -verbose=2
      - name: Sign the app bundle
        run: |
          codesign --force --deep --entitlements entitlements.plist --sign "SFDLSaugerPro" build/SFDLSaugerPro.app
          codesign -dv --verbose=4 build/SFDLSaugerPro.app
          find build/SFDLSaugerPro.app/Contents -name "*.dylib" -o -name "*.so" | while read lib; do
            codesign --force --sign "SFDLSaugerPro" "$lib"
          done
      - name: Create DMG package
        run: |
          hdiutil create -volname "SFDLSaugerPro" -srcfolder build/SFDLSaugerPro.app -ov -format UDZO build/SFDLSaugerPro.dmg
          codesign --force --sign "-" build/SFDLSaugerPro.dmg
      - name: Upload .dmg Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg
          path: build/SFDLSaugerPro.dmg
